import { ResourcesInterface } from './resources.interface';

export const resourcesEn: ResourcesInterface = {
    bit_by_bit: 'BitByBit',
    app_menu_run_code: 'Run The Code',
    app_menu_swap_canvas: 'Swap Canvas',
    app_menu_support_us_on_patreon: 'Support us on Patreon',
    app_menu_clean_canvas: 'Clean Canvas',
    app_menu_more: 'More',
    app_menu_more_about: 'About',
    app_menu_more_settings: 'Settings',
    app_menu_more_examples: 'Examples',
    app_menu_more_sponsors: 'Sponsors',
    app_menu_more_community: 'Community',
    app_menu_more_export: 'Export',
    app_menu_more_import: 'Import',
    block_toolbox_category_scene: 'Scene',
    block_toolbox_category_core_types: 'Types',
    block_toolbox_category_core_vector: 'Vector',
    block_toolbox_category_core_transforms: 'Transforms',
    block_toolbox_category_geom_point: 'Point',
    block_toolbox_category_geom_line: 'Line',
    block_toolbox_category_geom_polyline: 'Polyline',
    block_toolbox_category_geom_curve: 'Curve',
    block_toolbox_category_geom_surface: 'Surface',
    block_toolbox_category_loop: 'Loop',
    block_toolbox_category_logic: 'Logic',
    block_toolbox_category_math: 'Math',
    block_toolbox_category_lists: 'Lists',
    block_toolbox_category_colour: 'Colour',
    block_toolbox_category_text: 'Text',
    block_toolbox_category_variables: 'Variables',
    block_toolbox_category_functions: 'Functions',
    block_point: 'Point',
    block_coordinate_x: 'Coordinate X',
    block_coordinate_y: 'Coordinate Y',
    block_coordinate_z: 'Coordinate Z',
    block_coordinate_short_x: 'X',
    block_coordinate_short_y: 'Y',
    block_coordinate_short_z: 'Z',
    block_points: 'Points',
    block_curve: 'Curve',
    block_curves: 'Curves',
    block_colour: 'Colour',
    block_opacity: 'Opacity',
    block_width: 'Width',
    block_line: 'Line',
    block_lines: 'Lines',
    block_size: 'Size',
    block_polyline: 'Polyline',
    block_surface: 'Surface',
    block_surfaces: 'Surfaces',
    block_circle: 'Circle',
    block_center: 'Center',
    block_radius: 'Radius',
    block_min: 'Minimum',
    block_max: 'Maximum',
    block_integer: 'Integer',
    block_interval: 'Interval',
    block_scale: 'Scale',
    block_vector: 'Vector',
    block_vectors: 'Vectors',
    block_angle: 'Angle',
    block_axis: 'Axis',
    block_u: 'U',
    block_v: 'V',
    block_uv: 'UV',
    block_use_v: 'Use V',
    block_scalar: 'Scalar',
    block_distance: 'Distance',
    block_fraction: 'Fraction',
    block_transform: 'Transformation',
    block_reference: 'Reference',
    block_knots: 'Knots',
    block_knots_u: 'Knots U',
    block_knots_v: 'Knots V',
    block_weights: 'Weights',
    block_degree: 'Degree',
    block_degree_u: 'Degree U',
    block_degree_v: 'Degree V',
    block_num_derivatives: 'Number of derivatives',
    block_step: 'Step',
    block_parameter: 'Parameter',
    block_parameter_u: 'Parameter U',
    block_parameter_v: 'Parameter V',
    block_subdivision: 'Subdivision',
    block_length: 'Length',
    block_tolerance: 'Tolerance',
    block_validation_required: 'must be provided',
    block_validation_of_length: 'must contain item count of',
    block_validation_higher_or_equal: 'must be higher or equal to',
    block_validation_lower_or_equal: 'must be lower or equal to',
    block_validation_range: 'must be in range',
    block_validation_smaller_than: 'must be smaller than',
    block_validation_smaller_or_equal_than: 'must be smaller or equal than',
    block_validation_larger_than: 'must be larger than',
    block_validation_larger_or_equal_than: 'must be larger or equal than',
    block_babylon_input_curve: 'Draw curve',
    block_babylon_input_curves: 'Draw curves',
    block_babylon_input_colour: 'Colour',
    block_babylon_input_opacity: 'Opacity',
    block_babylon_input_width: 'Width',
    block_babylon_input_height: 'Height',
    block_babylon_input_subdivisions: 'Subdivisions',
    block_babylon_input_major_unit_frequency: 'Major unit frequency',
    block_babylon_input_minor_unit_visibility: 'Minor unit visibility',
    block_babylon_input_back_face_culling: 'Back face culling',
    block_babylon_input_main_colour: 'Main color',
    block_babylon_input_secondary_colour: 'Secondary color',
    block_babylon_input_grid_ratio: 'Grid ratio',
    block_babylon_input_draw_point: 'Draw a point',
    block_babylon_input_draw_points: 'Draw points',
    block_babylon_input_draw_grid: 'Draw grid of width',
    block_babylon_input_draw_line: 'Draw line',
    block_babylon_input_draw_lines: 'Draw lines',
    block_babylon_input_draw_polyline: 'Draw polyline',
    block_babylon_input_draw_surface: 'Draw surface',
    block_babylon_input_draw_surfaces: 'Draw surfaces',
    block_babylon_input_scene_background_colour: 'Scene background colour',
    block_babylon_input_size: 'Size',
    block_babylon_draw_curve_description: 'Draws a coloured curve of selected width.',
    block_babylon_draw_curves_description: 'Draws a coloured curves of selected width.',
    block_babylon_draw_grid_description: 'Draws the ground grid to help orientation when navigating 3D space.',
    block_babylon_draw_line_description: 'Draws a coloured line of selected width.',
    block_babylon_draw_lines_description: 'Draws a coloured line of selected width.',
    block_babylon_draw_point_description: 'Draws a coloured selected size point in space.',
    block_babylon_draw_points_description: 'Draws a coloured selected size points in space.',
    block_babylon_draw_polyline_description: 'Draws a coloured polyline of selected width.',
    block_babylon_draw_surface_description: 'Draws a coloured surface.',
    block_babylon_draw_surfaces_description: 'Draws a coloured surfaces.',
    block_babylon_scene_background_colour_description: 'Change the background color of the 3D scene.',
    block_base_geometry_input_line_start_point: 'Line with start point',
    block_base_geometry_input_line_end_point: 'End point',
    block_base_geometry_line_description: 'Constructs a Line object between two points.',
    block_base_geometry_line_end_point: 'End point of the line',
    block_base_geometry_line_end_point_description: 'Gets the end point of the line.',
    block_base_geometry_line_start_point: 'Start point of the line',
    block_base_geometry_line_start_point_description: 'Gets the start point of the line.',
    block_base_geometry_line_length: 'Length of the line',
    block_base_geometry_line_length_description: 'Get length of the line.',
    block_base_geometry_line_convert_to_nurbs_curve: 'Curve from line',
    block_base_geometry_line_convert_to_nurbs_curve_description: 'Converts line to curve.',
    block_base_geometry_polyline_convert_to_nurbs_curve: 'Curve from polyline',
    block_base_geometry_polyline_convert_to_nurbs_curve_description: 'Converts polyline to curve.',
    block_base_geometry_line_reverse: 'Reverse the line',
    block_base_geometry_line_reverse_description: 'Reverses the line direction. Start point becomes end point and vice versa.',
    block_base_geometry_point_description: 'Creates a point in space.',
    block_base_geometry_point_distance: 'Distance between first point',
    block_base_geometry_point_distance_second_point: 'Second point',
    block_base_geometry_point_distance_description: 'Measures a distance between two points.',
    block_base_geometry_point_x: 'X coordinate of the point',
    block_base_geometry_point_x_description: 'Gets X coordinate of the point.',
    block_base_geometry_point_y: 'Y coordinate of the point',
    block_base_geometry_point_y_description: 'Gets Y coordinate of the point.',
    block_base_geometry_point_z: 'Z coordinate of the point',
    block_base_geometry_point_z_description: 'Gets Z coordinate of the point.',
    block_base_geometry_polyline: 'Polyline with points',
    block_base_geometry_polyline_description: 'Constructs a polyline through points.',
    block_base_geometry_polyline_length: 'Length of the polyline',
    block_base_geometry_polyline_length_description: 'Gets a length of the polyline.',
    block_base_geometry_polyline_points: 'Points of the polyline',
    block_base_geometry_polyline_points_description: 'Gets the points of the polyline.',
    block_base_geometry_polyline_points_count: 'Count points in polyline',
    block_base_geometry_polyline_points_count_description: 'Counts points on the polyline.',
    block_base_geometry_polyline_reverse: 'Reverse the polyline',
    block_base_geometry_polyline_reverse_description: 'Flips the direction of the polyline.',
    block_base_geometry_shape_circle_center: 'Circle with center',
    block_base_geometry_shape_rectangle_center: 'Rectangle with center',
    block_base_geometry_shape_x_axis: 'X axis',
    block_base_geometry_shape_y_axis: 'Y axis',
    block_verb_core_interval_input_min: 'Interval with minimum',
    block_verb_core_interval_input_max: 'Maximum',
    block_verb_core_interval_description: 'Constructs interval between minimum and maximum. Minimum must be smaller or equal to maximum.',
    block_verb_core_interval_get_max: 'Maximum bound of the interval',
    block_verb_core_interval_get_max_description: 'Gets maximum bound of the interval.',
    block_verb_core_interval_get_min: 'Minimum bound of the interval',
    block_verb_core_interval_get_min_description: 'Gets minimum bound of the interval.',
    block_babylon_input_transformation_scale_uniform: 'Uniform scale',
    block_babylon_input_transformation_scale_center: 'Center',
    block_babylon_transformation_scale_uniform_description: 'Constructs transformation of uniform scale on XYZ directions.',
    block_babylon_input_transformation_scale_xyz: 'Scale with XYZ vector',
    block_babylon_transformation_scale_xyz_description: 'Constructs XYZ based scale that may scale geometry with different factors in different directions.',
    block_babylon_input_transformation_scale_center_uniform: 'Uniform scale',
    block_babylon_transformation_scale_center_uniform_description: 'Constructs transformations that scales object around certain point in space.',
    block_babylon_input_transformation_scale_center_xyz: 'Scale with XYZ vector',
    block_babylon_transformation_scale_center_xyz_description: 'Constructs XYZ based scale that may scale geometry with different factors in different directions around a center point.',
    block_babylon_input_transformation_translation_xyz: 'Move by XYZ vector',
    block_babylon_transformation_translation_xyz_description: 'Moves the object by XYZ vector',
    block_babylon_input_transformation_rotation_center_x: 'Rotate around X in angle',
    block_babylon_transformation_rotation_center_x_description: 'Rotates object around X axis and a center point.',
    block_babylon_input_transformation_rotation_center_y: 'Rotate around Y in angle',
    block_babylon_transformation_rotation_center_y_description: 'Rotates object around Y axis and a center point.',
    block_babylon_input_transformation_rotation_center_z: 'Rotate around Z in angle',
    block_babylon_transformation_rotation_center_z_description: 'Rotates object around Z axis and a center point.',
    block_babylon_input_transformation_rotation_center_angle: 'Rotate in angle',
    block_babylon_input_transformation_rotation_center_axis: 'Around axis',
    block_babylon_transformation_rotation_center_axis_description: 'Rotates object around Z axis and a center point.',
    block_verb_geom_curve_transform_curve: 'Transform curve',
    block_verb_geom_curve_transform_transformation: 'Transformation',
    block_verb_geom_curve_transform_description: 'Transforms the curve with provided transformation.',
    block_verb_geom_surface_transform_surface: 'Transform surface',
    block_verb_geom_surface_transform_transformation: 'Transformation',
    block_verb_geom_surface_transform_description: 'Transforms the surface with provided transformation.',
    block_base_geom_point_transform_point: 'Transform point',
    block_base_geom_point_transform_transformation: 'Transformation',
    block_base_geom_point_transform_description: 'Transforms the point with provided transformation.',
    block_base_geom_points_transform_points: 'Transform points',
    block_base_geom_points_transform_transformation: 'Transformation',
    block_base_geom_points_transform_description: 'Transforms the points with provided transformation.',
    block_base_geom_line_transform_line: 'Transform line',
    block_base_geom_line_transform_transformation: 'Transformation',
    block_base_geom_line_transform_description: 'Transforms the line with provided transformation.',
    block_base_geom_polyline_transform_polyline: 'Transform polyline',
    block_base_geom_polyline_transform_transformation: 'Transformation',
    block_base_geom_polyline_transform_description: 'Transforms the polyline with provided transformation.',
    block_verb_core_uv_input_u: 'UV parameter with U',
    block_verb_core_uv_input_v: 'And V',
    block_verb_core_uv_description: 'Constructs UV parameter object with U and V parameter values.',
    block_verb_core_uv_get_u: 'Get U of UV',
    block_verb_core_uv_get_v: 'Get V of UV',
    block_verb_core_uv_get_u_description: 'Gets U parameter of UV.',
    block_verb_core_uv_get_v_description: 'Gets V parameter of UV.',
    block_verb_core_vector_description: 'Constructs a vector from XYZ coordinates.',
    block_verb_core_vector_add_input_first: 'Add vector',
    block_verb_core_vector_add_input_second: 'With vector',
    block_verb_core_vector_add_description: 'Adds two vectors together.',
    block_verb_core_vector_sub_input_first: 'Subtract vector',
    block_verb_core_vector_sub_input_second: 'From vector',
    block_verb_core_vector_sub_description: 'Subtracts two vectors.',
    block_verb_core_vector_add_all_input_vectors: 'Add all vectors',
    block_verb_core_vector_add_all_description: 'Adds all vectors.',
    block_verb_core_vector_all_input: 'All booleans true',
    block_verb_core_vector_all_description: 'Checks if all booleans are true in the vector.',
    block_verb_core_vector_angle_between_input_first: 'Angle between first vector',
    block_verb_core_vector_angle_between_input_second: 'Second vector',
    block_verb_core_vector_angle_between_description: 'Measures an angle between two vectors.',
    block_verb_core_vector_angle_between_normalized_2d_input_first: 'Normalized 2d angle between first vector',
    block_verb_core_vector_angle_between_normalized_2d_input_second: 'Second vector',
    block_verb_core_vector_angle_between_normalized_2d_description: 'Measures normalized 2d angle between two vectors.',
    block_verb_core_vector_cross_input_first: 'Cross first vector',
    block_verb_core_vector_cross_input_second: 'Second vector',
    block_verb_core_vector_cross_description: 'Crossess two vectors.',
    block_verb_core_vector_distance_input_first: 'Distance between first vector',
    block_verb_core_vector_distance_input_second: 'Second vector',
    block_verb_core_vector_distance_description: 'Measures distance between two vectors.',
    block_verb_core_vector_distance_squared_input_first: 'Squared distance between first vector',
    block_verb_core_vector_distance_squared_input_second: 'Second vector',
    block_verb_core_vector_distance_squared_description: 'Measures a squared distance between two vectors.',
    block_verb_core_vector_div_input_vector: 'Divide a vector',
    block_verb_core_vector_div_input_scalar: 'By a scalar',
    block_verb_core_vector_div_description: 'Divides a vector by a scalar number.',
    block_verb_core_vector_domain_input_vector: 'Domain of the vector',
    block_verb_core_vector_domain_description: 'Measures the domain of the vector.',
    block_verb_core_vector_dot_input_vector: 'Dot product between vector',
    block_verb_core_vector_dot_input_scalar: 'Second vector',
    block_verb_core_vector_dot_description: 'Measures dot product between two vectors.',
    block_verb_core_vector_finite_input_vector: 'Check for infinity in vector',
    block_verb_core_vector_finite_description: 'Creates collection of booleans that identify if elements in the list are finite or not.',
    block_verb_core_vector_is_zero_input_vector: 'Is zero vector',
    block_verb_core_vector_is_zero_description: 'Checks if vector is zero vector.',
    block_verb_core_vector_lerp_fraction: 'Point on the fraction parameter',
    block_verb_core_vector_lerp_input_first: 'Between vector',
    block_verb_core_vector_lerp_input_second: 'And vector',
    block_verb_core_vector_lerp_description: 'Returns the point between the two vectors given the fraction parameter',
    block_verb_core_vector_max_input_vector: 'Highest number in vector',
    block_verb_core_vector_max_description: 'Returns maximum number in the vector.',
    block_verb_core_vector_min_input_vector: 'Lowest number in vector',
    block_verb_core_vector_min_description: 'Returns minimum number in the vector.',
    block_verb_core_vector_mul_input_vector: 'Multiply a vector',
    block_verb_core_vector_mul_input_scalar: 'By a scalar',
    block_verb_core_vector_mul_description: 'Multiplies a vector by a scalar number.',
    block_verb_core_vector_negate_input_vector: 'Negate the vector',
    block_verb_core_vector_negate_description: 'Negates the vector.',
    block_verb_core_vector_norm_input_vector: 'Norm of the vector',
    block_verb_core_vector_norm_description: 'Returns the distance of the vector from 0.',
    block_verb_core_vector_norm_squared_input_vector: 'Squared norm of the vector',
    block_verb_core_vector_norm_squared_description: 'Returns the squared norm of the vector.',
    block_verb_core_vector_normalized_input_vector: 'Normalize vector',
    block_verb_core_vector_normalized_description: 'Returns normalized vector of length 1.',
    block_verb_core_vector_on_ray_input_vector: 'Along vector',
    block_verb_core_vector_on_ray_input_point: 'Move point',
    block_verb_core_vector_on_ray_input_distance: 'By distance',
    block_verb_core_vector_on_ray_description: 'Moves a point along the vector by a given distance.',
    block_verb_core_vector_positive_angle_between_input_first: 'Positive angle between vector',
    block_verb_core_vector_positive_angle_between_input_second: 'Second vector',
    block_verb_core_vector_positive_angle_between_input_reference: 'Reference vector',
    block_verb_core_vector_positive_angle_between_description: 'Returns positive angle between two vectors and a reference direction.',
    block_verb_core_vector_signed_angle_between_input_first: 'Signed angle between vector',
    block_verb_core_vector_signed_angle_between_input_second: 'Second vector',
    block_verb_core_vector_signed_angle_between_input_reference: 'Reference vector',
    block_verb_core_vector_signed_angle_between_description: 'Returns signed angle between two vectors and a reference direction.',
    block_verb_core_vector_range_input_max: 'Range to maximum bound',
    block_verb_core_vector_range_description: 'Populates array of numbers between 0 and maximum provided integer bound.',
    block_verb_core_vector_span_input_min: 'Span of numbers between min',
    block_verb_core_vector_span_input_max: 'And max',
    block_verb_core_vector_span_input_step: 'At step',
    block_verb_core_vector_span_description: 'Populates the array of numbers between minimum and maximum values at a given step.',
    block_verb_core_vector_sum_input_vector: 'Sum all elements of a vector',
    block_verb_core_vector_sum_description: 'Sums all of the elements of a vector.',
    block_verb_geometry_nurbs_curve_by_knots_control_points_weights_input_knots: 'Curve by knots',
    block_verb_geometry_nurbs_curve_by_knots_control_points_weights_input_control_points: 'Control points',
    block_verb_geometry_nurbs_curve_by_knots_control_points_weights_input_weights: 'Weights',
    block_verb_geometry_nurbs_curve_by_knots_control_points_weights_input_degree: 'Of degree',
    block_verb_geometry_nurbs_curve_by_knots_control_points_weights_description: 'Creates a curve of degree by knots, control points and weights.',
    block_verb_geometry_nurbs_curve_by_points_inputs_points: 'Curve through points',
    block_verb_geometry_nurbs_curve_by_points_inputs_degree: 'Of degree',
    block_verb_geometry_nurbs_curve_by_points_description: 'Create a curve that goes through points.',
    block_verb_geometry_nurbs_curve_clone_input_curve: 'Clone the curve',
    block_verb_geometry_nurbs_curve_clone_description: 'Clones the curve.',
    block_verb_geometry_nurbs_curve_closest_param_input_curve: 'Closest parameter on the curve',
    block_verb_geometry_nurbs_curve_closest_param_input_point: 'From point',
    block_verb_geometry_nurbs_curve_closest_param_description: 'Finds closest parameter on the curve from point.',
    block_verb_geometry_nurbs_curve_closest_params_input_curve: 'Closest parameters on the curve',
    block_verb_geometry_nurbs_curve_closest_params_input_points: 'From points',
    block_verb_geometry_nurbs_curve_closest_params_description: 'Finds the closest parameters on the curve from a list of points.',
    block_verb_geometry_nurbs_curve_closest_point_input_curve: 'Closest point on the curve',
    block_verb_geometry_nurbs_curve_closest_point_input_point: 'From point',
    block_verb_geometry_nurbs_curve_closest_point_description: 'Finds closest point on the curve from point.',
    block_verb_geometry_nurbs_curve_closest_points_input_curve: 'Closest points on the curve',
    block_verb_geometry_nurbs_curve_closest_points_input_points: 'From points',
    block_verb_geometry_nurbs_curve_closest_points_description: 'Finds the closest points on the curve from a list of points.',
    block_verb_geometry_nurbs_curve_degree_input_curve: 'Degree of the curve',
    block_verb_geometry_nurbs_curve_degree_description: 'Returns the degree of the curve.',
    block_verb_geometry_nurbs_curve_derivatives_input_curve: 'Derivatives of the curve',
    block_verb_geometry_nurbs_curve_derivatives_input_parameter: 'At parameter',
    block_verb_geometry_nurbs_curve_derivatives_input_num_derivatives: 'Number of derivatives',
    block_verb_geometry_nurbs_curve_derivatives_description: 'Gets the derivatives of the curve.',
    block_verb_geometry_nurbs_curve_divide_by_equal_arc_length_params_input_curve: 'Divide the curve to parameters',
    block_verb_geometry_nurbs_curve_divide_by_equal_arc_length_params_input_subdivison_number: 'By number of segments',
    block_verb_geometry_nurbs_curve_divide_by_equal_arc_length_params_description: 'Subdivides a curve by equal arc length to a number of segments and returns parameters.',
    block_verb_geometry_nurbs_curve_divide_by_equal_arc_length_points_input_curve: 'Divide the curve to points',
    block_verb_geometry_nurbs_curve_divide_by_equal_arc_length_points_input_subdivison_number: 'By number of segments',
    block_verb_geometry_nurbs_curve_divide_by_equal_arc_length_points_description: 'Subdivides a curve by equal arc length to a number of segments and returns points.',
    block_verb_geometry_nurbs_curve_divide_by_arc_length_params_input_curve: 'Subdivide the curve to parameters',
    block_verb_geometry_nurbs_curve_divide_by_arc_length_params_input_arc_length: 'By arc length',
    block_verb_geometry_nurbs_curve_divide_by_arc_length_params_description: 'Subdivides the curve to parameters by arc length.',
    block_verb_geometry_nurbs_curve_divide_by_arc_length_points_input_curve: 'Subdivide the curve to points',
    block_verb_geometry_nurbs_curve_divide_by_arc_length_points_input_arc_length: 'By arc length',
    block_verb_geometry_nurbs_curve_divide_by_arc_length_points_description: 'Subdivides the curve to points by arc length.',
    block_verb_geometry_nurbs_curve_domain_input_curve: 'Domain of the curve',
    block_verb_geometry_nurbs_curve_domain_description: 'Returns the domain of the curve.',
    block_verb_geometry_nurbs_curve_knots_input_curve: 'Knots of the curve',
    block_verb_geometry_nurbs_curve_knots_description: 'Returns the knots of the curve.',
    block_verb_geometry_nurbs_curve_length_input_curve: 'Length of the curve',
    block_verb_geometry_nurbs_curve_length_description: 'Returns the length of the curve.',
    block_verb_geometry_nurbs_curve_length_at_param_input_curve: 'Length of the curve',
    block_verb_geometry_nurbs_curve_length_at_param_input_param: 'At parameter',
    block_verb_geometry_nurbs_curve_length_at_param_description: 'Gives back a length of the curve at parameter',
    block_verb_geometry_nurbs_curve_param_at_length_input_curve: 'Parameter on the curve',
    block_verb_geometry_nurbs_curve_param_at_length_input_length: 'At length',
    block_verb_geometry_nurbs_curve_param_at_length_input_tolerance: 'With tolerance',
    block_verb_geometry_nurbs_curve_param_at_length_description: 'Returns a parameter of the curve at a given length.',
    block_verb_geometry_nurbs_curve_reverse_input_curve: 'Reverse the curve',
    block_verb_geometry_nurbs_curve_reverse_description: 'Reverses the curve.',
    block_verb_geometry_nurbs_curve_split_input_curve: 'Split the curve',
    block_verb_geometry_nurbs_curve_split_input_param: 'At parameter',
    block_verb_geometry_nurbs_curve_split_description: 'Splits the curve to two parts at parameter and if successfult returns a list of two curves.',
    block_verb_geometry_nurbs_curve_tangent_input_curve: 'Tangent of curve',
    block_verb_geometry_nurbs_curve_tangent_input_param: 'At parameter',
    block_verb_geometry_nurbs_curve_tangent_description: 'Returns a tangent vector of the curve at parameter.',
    block_verb_geometry_nurbs_curve_tessellate_input_curve: 'Tessellate the curve',
    block_verb_geometry_nurbs_curve_tessellate_input_tolerance: 'With tolerance',
    block_verb_geometry_nurbs_curve_tessellate_description: 'Tessellate the curve to points with tolerance.',
    block_verb_geometry_nurbs_curve_weights_input_curve: 'Weights of the curve',
    block_verb_geometry_nurbs_curve_weights_description: 'Returns the weights of the curve.',
    block_verb_geometry_nurbs_surface_boundaries_input_surface: 'Boundary curves of the surface',
    block_verb_geometry_nurbs_surface_boundaries_description: 'Returns 4 boundary curves of the surface',
    block_verb_geometry_nurbs_surface_by_corners_input_point1: 'Surface with first corner point',
    block_verb_geometry_nurbs_surface_by_corners_input_point2: 'Second corner point',
    block_verb_geometry_nurbs_surface_by_corners_input_point3: 'Third corner point',
    block_verb_geometry_nurbs_surface_by_corners_input_point4: 'Fourth corner point',
    block_verb_geometry_nurbs_surface_by_corners_description: 'Constructs nurbs surface by 4 corner points.',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_input_knots_u: 'Surface by knots u',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_input_knots_v: 'knots v',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_input_points: 'points',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_input_weights: 'weights',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_input_degree_u: 'degree u',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_input_degree_v: 'degree v',
    block_verb_geometry_nurbs_surface_by_knots_control_points_weights_description: 'Creates a surface by uv knots, control points, weights and uv degrees.',
    blocK_verb_geometry_nurbs_surface_by_lofting_curves_input_curves: 'Surface by lofting curves',
    blocK_verb_geometry_nurbs_surface_by_lofting_curves_input_degree_v: 'Of degree v',
    blocK_verb_geometry_nurbs_surface_by_lofting_curves_description: 'Lofts curves to form a surface.',
    block_verb_geometry_nurbs_surface_clone_input_surface: 'Clone the surface',
    block_verb_geometry_nurbs_surface_clone_description: 'Clones the surface.',
    block_verb_geometry_nurbs_surface_closest_param_input_surface: 'Closest parameter on the surface',
    block_verb_geometry_nurbs_surface_closest_param_input_point: 'From point',
    block_verb_geometry_nurbs_surface_closest_param_description: 'Finds the closest uv parameter on the surface from a point',
    block_verb_geometry_nurbs_surface_closest_point_input_surface: 'Closest point on the surface',
    block_verb_geometry_nurbs_surface_closest_point_input_point: 'From point',
    block_verb_geometry_nurbs_surface_closest_point_description: 'Finds the closest point on the surface.',
    block_verb_geometry_nurbs_surface_control_points_input_surface: 'Control points of the surface',
    block_verb_geometry_nurbs_surface_control_points_description: 'Gets control points of the surface',
    block_verb_geometry_nurbs_surface_degree_u_input_surface: 'Degree u of the surface',
    block_verb_geometry_nurbs_surface_degree_u_points_description: 'Gets the u degree of the surface',
    block_verb_geometry_nurbs_surface_degree_v_input_surface: 'Degree v of the surface',
    block_verb_geometry_nurbs_surface_degree_v_points_description: 'Gets the v degree of the surface',
    block_verb_geometry_nurbs_surface_derivatives_input_surface: 'Derivatives of the surface',
    block_verb_geometry_nurbs_surface_derivatives_input_u: 'At parameter u',
    block_verb_geometry_nurbs_surface_derivatives_input_v: 'And parameter v',
    block_verb_geometry_nurbs_surface_derivatives_input_num_derivatives: 'Number of derivatives',
    block_verb_geometry_nurbs_surface_derivatives_description: 'Gets specified amoung ot derivatives of the surface at uv coordinates.',
    block_verb_geometry_nurbs_surface_domain_u_input_surface: 'U domain of the surface',
    block_verb_geometry_nurbs_surface_domain_u_description: 'Gets the u domain of the surface in a form of the interval.',
    block_verb_geometry_nurbs_surface_domain_v_input_surface: 'V domain of the surface',
    block_verb_geometry_nurbs_surface_domain_v_description: 'Gets the v domain of the surface in a form of the interval.',
};
