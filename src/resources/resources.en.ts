import { ResourcesInterface } from './resources.interface';

export const resourcesEn: ResourcesInterface = {
    bit_by_bit: 'BitByBit',
    app_menu_run_code: 'Run The Code',
    app_menu_swap_canvas: 'Swap Canvas',
    app_menu_support_us_on_patreon: 'Support us on Patreon',
    app_menu_clean_canvas: 'Clean Canvas',
    app_menu_more: 'More',
    app_menu_more_about: 'About',
    app_menu_more_settings: 'Settings',
    app_menu_more_examples: 'Examples',
    app_menu_more_sponsors: 'Sponsors',
    app_menu_more_community: 'Community',
    app_menu_more_export: 'Export',
    app_menu_more_import: 'Import',
    block_toolbox_category_scene: 'Scene',
    block_toolbox_category_core_types: 'Core Types',
    block_toolbox_category_core_vector: 'Core Vector',
    block_toolbox_category_geom_point: 'Geom Point',
    block_toolbox_category_geom_line: 'Geom Line',
    block_toolbox_category_geom_polyline: 'Geom Polyline',
    block_toolbox_category_geom_curve: 'Geom Curve',
    block_toolbox_category_geom_surface: 'Geom Surface',
    block_toolbox_category_loop: 'Loop',
    block_toolbox_category_logic: 'Logic',
    block_toolbox_category_math: 'Math',
    block_toolbox_category_lists: 'Lists',
    block_toolbox_category_colour: 'Colour',
    block_toolbox_category_text: 'Text',
    block_toolbox_category_variables: 'Variables',
    block_toolbox_category_functions: 'Functions',
    block_point: 'Point',
    block_coordinate_x: 'Coordinate X',
    block_coordinate_y: 'Coordinate Y',
    block_coordinate_z: 'Coordinate Z',
    block_coordinate_short_x: 'X',
    block_coordinate_short_y: 'Y',
    block_coordinate_short_z: 'Z',
    block_points: 'Points',
    block_curve: 'Curve',
    block_curves: 'Curves',
    block_colour: 'Colour',
    block_opacity: 'Opacity',
    block_width: 'Width',
    block_line: 'Line',
    block_lines: 'Lines',
    block_size: 'Size',
    block_polyline: 'Polyline',
    block_surface: 'Surface',
    block_surfaces: 'Surfaces',
    block_circle: 'Circle',
    block_center: 'Center',
    block_radius: 'Radius',
    block_min: 'Minimum',
    block_max: 'Maximum',
    block_interval: 'Interval',
    block_scale: 'Scale',
    block_vector: 'Vector',
    block_vectors: 'Vectors',
    block_angle: 'Angle',
    block_axis: 'Axis',
    block_u: 'U',
    block_v: 'V',
    block_uv: 'UV',
    block_scalar: 'Scalar',
    block_transform: 'Transformation',
    block_validation_required: 'must be provided',
    block_validation_of_length: 'must contain item count of',
    block_validation_higher_or_equal: 'must be higher or equal to',
    block_validation_lower_or_equal: 'must be lower or equal to',
    block_validation_range: 'must be in range',
    block_validation_smaller_than: 'must be smaller than',
    block_validation_smaller_or_equal_than: 'must be smaller or equal than',
    block_validation_larger_than: 'must be larger than',
    block_validation_larger_or_equal_than: 'must be larger or equal than',
    block_babylon_input_curve: 'Draw curve',
    block_babylon_input_curves: 'Draw curves',
    block_babylon_input_colour: 'Colour',
    block_babylon_input_opacity: 'Opacity',
    block_babylon_input_width: 'Width',
    block_babylon_input_height: 'Height',
    block_babylon_input_subdivisions: 'Subdivisions',
    block_babylon_input_major_unit_frequency: 'Major unit frequency',
    block_babylon_input_minor_unit_visibility: 'Minor unit visibility',
    block_babylon_input_back_face_culling: 'Back face culling',
    block_babylon_input_main_colour: 'Main color',
    block_babylon_input_secondary_colour: 'Secondary color',
    block_babylon_input_grid_ratio: 'Grid ratio',
    block_babylon_input_draw_point: 'Draw a point',
    block_babylon_input_draw_points: 'Draw points',
    block_babylon_input_draw_grid: 'Draw grid of width',
    block_babylon_input_draw_line: 'Draw line',
    block_babylon_input_draw_lines: 'Draw lines',
    block_babylon_input_draw_polyline: 'Draw polyline',
    block_babylon_input_draw_surface: 'Draw surface',
    block_babylon_input_draw_surfaces: 'Draw surfaces',
    block_babylon_input_scene_background_colour: 'Scene background colour',
    block_babylon_input_size: 'Size',
    block_babylon_draw_curve_description: 'Draws a coloured curve of selected width.',
    block_babylon_draw_curves_description: 'Draws a coloured curves of selected width.',
    block_babylon_draw_grid_description: 'Draws the ground grid to help orientation when navigating 3D space.',
    block_babylon_draw_line_description: 'Draws a coloured line of selected width.',
    block_babylon_draw_lines_description: 'Draws a coloured line of selected width.',
    block_babylon_draw_point_description: 'Draws a coloured selected size point in space.',
    block_babylon_draw_points_description: 'Draws a coloured selected size points in space.',
    block_babylon_draw_polyline_description: 'Draws a coloured polyline of selected width.',
    block_babylon_draw_surface_description: 'Draws a coloured surface.',
    block_babylon_draw_surfaces_description: 'Draws a coloured surfaces.',
    block_babylon_scene_background_colour_description: 'Change the background color of the 3D scene.',
    block_base_geometry_input_line_start_point: 'Line with start point',
    block_base_geometry_input_line_end_point: 'End point',
    block_base_geometry_line_description: 'Constructs a Line object between two points.',
    block_base_geometry_line_end_point: 'End point of the line',
    block_base_geometry_line_end_point_description: 'Gets the end point of the line.',
    block_base_geometry_line_start_point: 'Start point of the line',
    block_base_geometry_line_start_point_description: 'Gets the start point of the line.',
    block_base_geometry_line_length: 'Length of the line',
    block_base_geometry_line_length_description: 'Get length of the line.',
    block_base_geometry_line_convert_to_nurbs_curve: 'Curve from line',
    block_base_geometry_line_convert_to_nurbs_curve_description: 'Converts line to curve.',
    block_base_geometry_polyline_convert_to_nurbs_curve: 'Curve from polyline',
    block_base_geometry_polyline_convert_to_nurbs_curve_description: 'Converts polyline to curve.',
    block_base_geometry_line_reverse: 'Reverse the line',
    block_base_geometry_line_reverse_description: 'Reverses the line direction. Start point becomes end point and vice versa.',
    block_base_geometry_point_description: 'Creates a point in space.',
    block_base_geometry_point_distance: 'Distance between first point',
    block_base_geometry_point_distance_second_point: 'Second point',
    block_base_geometry_point_distance_description: 'Measures a distance between two points.',
    block_base_geometry_point_x: 'X coordinate of the point',
    block_base_geometry_point_x_description: 'Gets X coordinate of the point.',
    block_base_geometry_point_y: 'Y coordinate of the point',
    block_base_geometry_point_y_description: 'Gets Y coordinate of the point.',
    block_base_geometry_point_z: 'Z coordinate of the point',
    block_base_geometry_point_z_description: 'Gets Z coordinate of the point.',
    block_base_geometry_polyline: 'Polyline with points',
    block_base_geometry_polyline_description: 'Constructs a polyline through points.',
    block_base_geometry_polyline_length: 'Length of the polyline',
    block_base_geometry_polyline_length_description: 'Gets a length of the polyline.',
    block_base_geometry_polyline_points: 'Points of the polyline',
    block_base_geometry_polyline_points_description: 'Gets the points of the polyline.',
    block_base_geometry_polyline_points_count: 'Count points in polyline',
    block_base_geometry_polyline_points_count_description: 'Counts points on the polyline.',
    block_base_geometry_polyline_reverse: 'Reverse the polyline',
    block_base_geometry_polyline_reverse_description: 'Flips the direction of the polyline.',
    block_base_geometry_shape_circle_center: 'Circle with center',
    block_base_geometry_shape_rectangle_center: 'Rectangle with center',
    block_base_geometry_shape_x_axis: 'X axis',
    block_base_geometry_shape_y_axis: 'Y axis',
    block_verb_core_interval_input_min: 'Interval with minimum',
    block_verb_core_interval_input_max: 'Maximum',
    block_verb_core_interval_description: 'Constructs interval between minimum and maximum. Minimum must be smaller or equal to maximum.',
    block_verb_core_interval_get_max: 'Maximum bound of the interval',
    block_verb_core_interval_get_max_description: 'Gets maximum bound of the interval.',
    block_verb_core_interval_get_min: 'Minimum bound of the interval',
    block_verb_core_interval_get_min_description: 'Gets minimum bound of the interval.',
    block_babylon_input_transformation_scale_uniform: 'Uniform scale',
    block_babylon_input_transformation_scale_center: 'Center',
    block_babylon_transformation_scale_uniform_description: 'Constructs transformation of uniform scale on XYZ directions.',
    block_babylon_input_transformation_scale_xyz: 'Scale with XYZ vector',
    block_babylon_transformation_scale_xyz_description: 'Constructs XYZ based scale that may scale geometry with different factors in different directions.',
    block_babylon_input_transformation_scale_center_uniform: 'Uniform scale',
    block_babylon_transformation_scale_center_uniform_description: 'Constructs transformations that scales object around certain point in space.',
    block_babylon_input_transformation_scale_center_xyz: 'Scale with XYZ vector',
    block_babylon_transformation_scale_center_xyz_description: 'Constructs XYZ based scale that may scale geometry with different factors in different directions around a center point.',
    block_babylon_input_transformation_translation_xyz: 'Move by XYZ vector',
    block_babylon_transformation_translation_xyz_description: 'Moves the object by XYZ vector',
    block_babylon_input_transformation_rotation_center_x: 'Rotate around X in angle',
    block_babylon_transformation_rotation_center_x_description: 'Rotates object around X axis and a center point.',
    block_babylon_input_transformation_rotation_center_y: 'Rotate around Y in angle',
    block_babylon_transformation_rotation_center_y_description: 'Rotates object around Y axis and a center point.',
    block_babylon_input_transformation_rotation_center_z: 'Rotate around Z in angle',
    block_babylon_transformation_rotation_center_z_description: 'Rotates object around Z axis and a center point.',
    block_babylon_input_transformation_rotation_center_angle: 'Rotate in angle',
    block_babylon_input_transformation_rotation_center_axis: 'Around axis',
    block_babylon_transformation_rotation_center_axis_description: 'Rotates object around Z axis and a center point.',
    block_verb_geom_curve_transform_curve: 'Transform curve',
    block_verb_geom_curve_transform_transformation: 'Transformation',
    block_verb_geom_curve_transform_description: 'Transforms the curve with provided transformation.',
    block_verb_geom_surface_transform_surface: 'Transform surface',
    block_verb_geom_surface_transform_transformation: 'Transformation',
    block_verb_geom_surface_transform_description: 'Transforms the surface with provided transformation.',
    block_base_geom_point_transform_point: 'Transform point',
    block_base_geom_point_transform_transformation: 'Transformation',
    block_base_geom_point_transform_description: 'Transforms the point with provided transformation.',
    block_base_geom_points_transform_points: 'Transform points',
    block_base_geom_points_transform_transformation: 'Transformation',
    block_base_geom_points_transform_description: 'Transforms the points with provided transformation.',
    block_base_geom_line_transform_line: 'Transform line',
    block_base_geom_line_transform_transformation: 'Transformation',
    block_base_geom_line_transform_description: 'Transforms the line with provided transformation.',
    block_base_geom_polyline_transform_polyline: 'Transform polyline',
    block_base_geom_polyline_transform_transformation: 'Transformation',
    block_base_geom_polyline_transform_description: 'Transforms the polyline with provided transformation.',
    block_verb_core_uv_input_u: 'UV parameter with U',
    block_verb_core_uv_input_v: 'And V',
    block_verb_core_uv_description: 'Constructs UV parameter object with U and V parameter values.',
    block_verb_core_uv_get_u: 'Get U of UV',
    block_verb_core_uv_get_v: 'Get V of UV',
    block_verb_core_uv_get_u_description: 'Gets U parameter of UV.',
    block_verb_core_uv_get_v_description: 'Gets V parameter of UV.',
    block_verb_core_vector_description: 'Constructs a vector from XYZ coordinates.',
    block_verb_core_vector_add_input_first: 'Add vector',
    block_verb_core_vector_add_input_second: 'With vector',
    block_verb_core_vector_add_description: 'Adds two vectors together.',
    block_verb_core_vector_add_all_input_vectors: 'Add all vectors',
    block_verb_core_vector_add_all_description: 'Adds all vectors.',
    block_verb_core_vector_all_input: 'All booleans true',
    block_verb_core_vector_all_description: 'Checks if all booleans are true in the vector.',
    block_verb_core_vector_angle_between_input_first: 'Angle between first vector',
    block_verb_core_vector_angle_between_input_second: 'Second vector',
    block_verb_core_vector_angle_between_description: 'Measures an angle between two vectors.',
    block_verb_core_vector_angle_between_normalized_2d_input_first: 'Normalized 2d angle between first vector',
    block_verb_core_vector_angle_between_normalized_2d_input_second: 'Second vector',
    block_verb_core_vector_angle_between_normalized_2d_description: 'Measures normalized 2d angle between two vectors.',
    block_verb_core_vector_cross_input_first: 'Cross first vector',
    block_verb_core_vector_cross_input_second: 'Second vector',
    block_verb_core_vector_cross_description: 'Crossess two vectors.',
    block_verb_core_vector_distance_input_first: 'Distance between first vector',
    block_verb_core_vector_distance_input_second: 'Second vector',
    block_verb_core_vector_distance_description: 'Measures distance between two vectors.',
    block_verb_core_vector_distance_squared_input_first: 'Squared distance between first vector',
    block_verb_core_vector_distance_squared_input_second: 'Second vector',
    block_verb_core_vector_distance_squared_description: 'Measures a squared distance between two vectors.',
    block_verb_core_vector_div_input_vector: 'Divide a vector',
    block_verb_core_vector_div_input_scalar: 'By a scalar',
    block_verb_core_vector_div_description: 'Divides a vector by a scalar number.',
    block_verb_core_vector_domain_input_vector: 'Domain of the vector',
    block_verb_core_vector_domain_description: 'Measures the domain of the vector.',
    block_verb_core_vector_dot_input_vector: 'Dot product between vector',
    block_verb_core_vector_dot_input_scalar: 'Second vector',
    block_verb_core_vector_dot_description: 'Measures dot product between two vectors.'
};
